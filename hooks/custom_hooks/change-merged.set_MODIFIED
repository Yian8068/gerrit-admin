#!/bin/bash
## @file
## Moves the bugs in the commit message to MODIFIED, only if it's an upstream
## bug (meaning that belongs to one of ovirt* components) and all the external
## bugs have been closed
## Conf options:
##   - TRACKER_NAME -> Tracker name as seen on the gerrit external tracker list
##   - BZ_USER -> Username to use when logging in to bugzilla
##   - BZ_PASS -> Password to use when logging into bugzilla
##   - CHECK_TARGET_RELEASE -> Pairs of 'branch|regexp' to match agains the bug
##       target release, if regexp starts with '!' it will be negated
##   - CONTACT -> email to contact in case of failure
source bz.sh
source tools.sh
source gerrit.sh
source conf.sh

###############################################################################
## MAIN
## Parse the parameters
gerrit.parse_params "$@"

## Parse the configuration
conf.load
bz_user="${BZ_USER?No BZ_USER in the config file ${0%.*}.config}"
bz_password="${BZ_PASS?No BZ_PASS in the config file ${0%.*}.config}"

message=''
current_patch_id="${change_url//*\/}"
bug_ids=($(bz.get_bug_id "$commit"))
hdr="Set MODIFIED"
tools.log "Processing bugs ${bug_ids[@]}"
for bug_id in "${bug_ids[@]}"; do
    hdr="$hdr::bug $bug_id::"
    msg_hdr="* $hdr::#$bug_id::"
    bz.login -b "$bug_id" "$bz_user" "$bz_password" \
    || {
        message+="${message:+\n}$msg_hdr::"
        message+="Error logging to bugzilla, please contact "
        message+="${CONTACT:-infra@ovirt.org}"
        tools.review "" "" "$message"
        bz.clean
        gerrit.clean
        exit 2
    }
    ### Skip downstream bugs
    #classification="$(bz.get_classification "$bug_id")"
    #product="$(bz.get_product "$bug_id")"
    #if ! [[ "$classification" =~ ^oVirt$ ]] && [[ "$product" != "lago" ]]; then
    #    tools.log "${hdr}Not an oVirt bug, belongs to $classification"
    #    message+="${message:+\n}$msg_hdr::IGNORE, not oVirt classification "
    #    message+="but $classification"
    #    continue
    #fi
    ## Check if all the external bugs are closed
    all_merged='true'
    open_patches=()
    for patch_id in $(bz.get_external_bugs "$bug_id" "$TRACKER_NAME"); do
        [[ "$current_patch_id" == "$patch_id" ]] && continue
        if $(gerrit.is_open "$patch_id"); then
            tools.log "${hdr}Related patch $patch_id is still open"
            all_merged="false"
            open_patches+=("$patch_id")
        fi
    done
    if [[ "$all_merged" != "true" ]]; then
        tools.log "${hdr}SKIP because not all related patches are" \
             "closed."
        message+="${message:+\n}$msg_hdr::IGNORE, not all related patches are "
        message+="closed, check ${open_patches}"
        continue
    fi

    ## Check if the target milestone matches the branch
    target_milestone="$(bz.get_target_milestone "$bug_id")"
    cur_branch="${branch?No --branch parameter was passed}"

    ### If the branch we are in is not in the form '.*-X.Y.Z' move it's bugs as
    ### usual

    digits_regex='[[:digit:]]+\.[[:digit:]]+(\.[[:digit:]]+)?$'

    # Get the branch suffix
    branch_suffix=''
    if [[ "$cur_branch" =~ $digits_regex ]]; then
        branch_suffix="$BASH_REMATCH"
    else
        tools.log "${hdr}branch: $cur_branch doesn't match $digits_regex"
	message+="${message:+\n}${msg_hdr}IGNORE,"
	message+=" skipping for branch '${cur_branch}'"
	continue
    fi
    tools.log "::bug $bug_id:: Got branch suffix ${branch_suffix:-None}"

    # Get the milestone suffix
    with_milestone_regex='([[:digit:]]+\.[[:digit:]]+)(\.[[:digit:]]+)?-[^-]+$'
    milestone_suffix=''
    if [[ "$target_milestone" =~ $digits_regex ]]; then
        milestone_suffix="$BASH_REMATCH"
    elif [[ "$target_milestone" =~ $with_milestone_regex ]]; then
        milestone_suffix="${BASH_REMATCH[1]}"
    else
        tools.log "${hdr}Unknown milestone $target_milestone"
    fi

    # including also 'master' branch, since its branch suffix will be ""
    if [[ "$milestone_suffix" != "" ]]; then
        tools.ver_cmp "$branch_suffix" "$milestone_suffix"
        case $? in
            $TOOLS_VERCMP_EQUAL)
                # keep going and allow modifying the status
                ;;
            $TOOLS_VERCMP_GT)
                # keep going and allow modifying the status
                ;;
            $TOOLS_VERCMP_LT)
                # check if the patch is on master branch or if there are newer branches
                # like x.y.z to consider (i.e skip the move to MODIFIED)
                matching_branches=(
                    $(gerrit.get_branches "*-$milestone_suffix")
                )
                if [[ "$matching_branches" =~ $digits_regex ]]; then
                    tools.log "::bug $bug_id::Skipping detected branches" \
                        "($matching_branches) that match target milestone" \
                        "$target_milestone, bug should move to MODIFIED" \
                        "only when merged on the latest branch for the target milestone"
                    message+="${message:+\n}$msg_hdr::SKIPPED${res:+, $res}"
                    continue
                fi
                tools.log "::bug $bug_id::Changing bug with branch version " \
                    "lower than target milestone because there's no branch " \
                    "($matching_branches) that matches the milestone " \
                    "$target_milestone"
                # if there is no matching branch, keep going and allow
                # modifying the status
                ;;
            *)
                message+="${message:+\n}$msg_hdr::"
                message+="Error comparing milestone and branch, please "
                message+="contact ${CONTACT:-infra@ovirt.org}"
                continue
                ;;
        esac
    fi
    ## Modify the bug status
    if res=$(bz.update_status "$bug_id" "MODIFIED" "$commit"); then
        tools.log "::bug $bug_id::Status updated on bug #$bug_id for gerrit " \
            "id #${change_url//*\/} to MODIFIED${res:+\n    $res}"
        message+="${message:+\n}$msg_hdr::OK${res:+, $res}"
    else
        tools.log "::bug $bug_id::Failed to update the status of bug " \
            "#$bug_id for gerrit id #${current_patch_id} to MODIFIED\n  $res"
        message+="${message:+\n}$msg_hdr::FAILED, $res"
    fi
    conf.t_put message "$message"
done
if [[ ${#bug_ids[@]} -eq 0 ]]; then
    tools.review "" "" "* Set MODIFIED::IGNORE, no Bug-Url found."
else
    tools.review "" "" "$message"
fi
bz.clean
gerrit.clean
exit 0
