#!/bin/bash
## @file
## Moves the bugs in the commit message to MODIFIED, only if it's an upstream
## bug (meaning that belongs to one of ovirt* components) and all the external
## bugs have been closed
## Conf options:
##   - TRACKER_NAME -> Tracker name as seen on the gerrit external tracker list
##   - BZ_USER -> Username to use when logging in to bugzilla
##   - BZ_PASS -> Password to use when logging into bugzilla
##   - CHECK_TARGET_RELEASE -> Pairs of 'branch|regexp' to match agains the bug
##       target release, if regexp starts with '!' it will be negated
##   - CONTACT -> email to contact in case of failure
source bz.sh
source tools.sh
source gerrit.sh
source conf.sh

###############################################################################
## MAIN
## Parse the parameters
gerrit.parse_params "$@"

## Parse the configuration
conf.load
bz_user="${BZ_USER?No BZ_USER in the config file ${0%.*}.config}"
bz_password="${BZ_PASS?No BZ_PASS in the config file ${0%.*}.config}"

message=''
current_patch_id="${change_url//*\/}"
bug_ids=($(bz.get_bug_id "$commit"))
hdr="Set MODIFIED"
tools.log "Processing bugs ${bug_ids[@]}"
for bug_id in "${bug_ids[@]}"; do
    hdr="$hdr::bug $bug_id::"
    msg_hdr="* $hdr::#$bug_id::"
    bz.login -b "$bug_id" "$bz_user" "$bz_password" \
    || {
        message+="${message:+\n}$msg_hdr::"
        message+="Error logging to bugzilla, please contact "
        message+="${CONTACT:-infra@ovirt.org}"
        tools.review "" "" "$message"
        bz.clean
        gerrit.clean
        exit 2
    }
    ### Skip downstream bugs
    #classification="$(bz.get_classification "$bug_id")"
    #product="$(bz.get_product "$bug_id")"
    #if ! [[ "$classification" =~ ^oVirt$ ]] && [[ "$product" != "lago" ]]; then
    #    tools.log "${hdr}Not an oVirt bug, belongs to $classification"
    #    message+="${message:+\n}$msg_hdr::IGNORE, not oVirt classification "
    #    message+="but $classification"
    #    continue
    #fi
    ## Check if all the external bugs are closed
    all_merged='true'
    open_patches=()
    for patch_id in $(bz.get_external_bugs "$bug_id" "$TRACKER_NAME"); do
        [[ "$current_patch_id" == "$patch_id" ]] && continue
        if $(gerrit.is_open "$patch_id"); then
            tools.log "${hdr}Related patch $patch_id is still open"
            all_merged="false"
            open_patches+=("$patch_id")
        fi
    done
    if [[ "$all_merged" != "true" ]]; then
        tools.log "${hdr}SKIP because not all related patches are" \
             "closed."
        message+="${message:+\n}$msg_hdr::IGNORE, not all related patches are "
        message+="closed, check ${open_patches}"
        continue
    fi

    ## Check if the target milestone matches the branch
    target_milestone="$(bz.get_target_milestone "$bug_id")"
    current_branch="${branch?No --branch parameter was passed}"

    ### If the branch we are in is not in the form '.*-X.Y.Z'
    ### don't move it's bugs automatically
    branch_regex='[[:digit:]]+\.[[:digit:]]+(\.[[:digit:]]+)?$'

    # Get the branch suffix
    branch_suffix=''
    if [[ "$current_branch" =~ $branch_regex ]]; then
        branch_suffix="$BASH_REMATCH"
    else
        tools.log "${hdr}branch: '${current_branch}' doesn't match" \
            "'${branch_regex}'"
        message+="${message:+\n}${msg_hdr}IGNORE, "
        message+="skipping for branch '${current_branch}'"
        continue
    fi
    tools.log "::bug $bug_id:: Got branch suffix ${branch_suffix:-None}"

    # Get the milestone suffix
    tm_regex='([[:digit:]]+\.[[:digit:]]+)(\.[[:digit:]]+)?-[^-]+$'

    tm_suffix=''
    if [[ "$target_milestone" =~ $branch_regex ]]; then
        tm_suffix="$BASH_REMATCH"
    elif [[ "$target_milestone" =~ $tm_regex ]]; then
        tm_suffix="${BASH_REMATCH[1]}"
    else
        tools.log "${hdr}Unknown milestone '${target_milestone}'"
    fi

    msg=''
    # check if tm_suffix is not equal to branch_suffix
    if [[ "${tm_suffix}" != "${branch_suffix}" ]] ; then
        tools.log "${hdr}tm_suffix '${tm_suffix}' is not equal to" \
            "branch_suffix '${branch_suffix}', checking if suffix match..."

        # check if tm_suffix match branch_suffix (X.Y/.Z)
        if [[ "${tm_suffix}" =~ "${branch_suffix}" ]] ; then
        tools.log "${hdr}tm_suffix '${tm_suffix}' match the branch_suffix" \
            "'${branch_suffix}', checking if branch exist..."

            # if the branch does not exist ==> move bug to MODIFIED
            matching_branch=$(gerrit.get_branches "*-${tm_suffix}$")
            tools.log "${hdr}matching_branch: ${matching_branch}"
            if [[ ${matching_branch:-"None"} =~ $tm_suffix ]] ; then
                msg="The branch '${matching_branch}' for the current "
                msg+="target milestone '${target_milestone}' exists."
                tools.log "${hdr}${msg}"
                message+="${message:+\n}${msg_hdr}SKIPPED, ${msg}"
                continue
            fi
        else
            msg="tm_suffix '${tm_suffix}' does not match branch_suffix "
            msg+="'${branch_suffix}'."
            tools.log "${hdr}${msg}"
            message+="${message:+\n}${msg_hdr}SKIPPED, ${msg}"
            continue
        fi
    else
        # tm_suffix equals to branch_suffix ==> move bug to MODIFIED
        tools.log "${hdr}tm_suffix '${tm_suffix}' matches branch_suffix" \
            "'${branch_suffix}' ==> moving bug to MODIFIED."
    fi
    unset msg

    ## Modify the bug status
    if res=$(bz.update_status "$bug_id" "MODIFIED" "$commit"); then
        tools.log "::bug $bug_id::Status updated on bug #$bug_id for patch" \
            "id #${current_patch_id} to MODIFIED${res:+\n    $res}"
        message+="${message:+\n}$msg_hdr::OK${res:+, $res}"
    else
        tools.log "::bug $bug_id::Failed to update the status of bug" \
            "#$bug_id for patch id #${current_patch_id} to MODIFIED\n  $res"
        message+="${message:+\n}$msg_hdr::FAILED, $res"
    fi
    conf.t_put message "$message"
done

if [[ ${#bug_ids[@]} -eq 0 ]]; then
    tools.review "" "" "* Set MODIFIED::IGNORE, no Bug-Url found."
else
    tools.review "" "" "$message"
fi
bz.clean
gerrit.clean
exit 0
