#!/bin/bash
###############################################################################
# Moves the bugs in the commit message to MODIFIED, only if it's an upstream
# bug (meaning that belongs to one of ovirt* components) and all the external
# bugs have been closed
#
# Conf options:
#   TRACKER_NAME -> Tracker name as seen on the gerrit external tracker list
#   BZ_USER -> Username to use when logging in to bugzilla
#   BZ_PASS -> Password to use when logging into bugzilla
#   CHECK_TARGET_RELEASE -> Pairs of 'branch|regexp' to match agains the bug
#       target release, if regexp starts with '!' it will be negated
#   CONTACT -> email to contact in case of failure
#
source bz.sh
source tools.sh
source gerrit.sh
source conf.sh

###############################################################################
## MAIN
## Parse the parameters
gerrit.parse_params "$@"

## Parse the configuration
conf.load
bz_user="${BZ_USER?No BZ_USER in the config file ${0%.*}.config}"
bz_password="${BZ_PASS?No BZ_PASS in the config file ${0%.*}.config}"

message=''
current_patch_id="${change_url//*\/}"
bug_ids=($(bz.get_bug_id "$commit"))
hdr="Set MODIFIED"
tools.log "Processing bugs ${bug_ids[@]}"
for bug_id in "${bug_ids[@]}"; do
    hdr="$hdr::bug $bug_id::"
    msg_hdr="* $hdr::#$bug_id::"
    bz.login -b "$bug_id" "$bz_user" "$bz_password" \
    || {
        message+="${message:+\n}$msg_hdr::"
        message+="Error logging to bugzilla, please contact "
        message+="${CONTACT:-dcaroest@redhat.com}"
        tools.review "" "" "$message"
        bz.clean
        gerrit.clean
        exit 2
    }
    ### Skip downstream bugs
    product="$(bz.get_product "$bug_id")"
    if ! [[ "$product" =~ ^oVirt$ ]]; then
        tools.log "${hdr}Not an oVirt bug, belongs to $product"
        message+="${message:+\n}$msg_hdr::IGNORE, not oVirt prod but $product"
        continue
    fi
    ## Check if all the external bugs are closed
    all_merged='true'
    open_patches=()
    for patch_id in $(bz.get_external_bugs "$bug_id" "$TRACKER_NAME"); do
        [[ "$current_patch_id" == "$patch_id" ]] && continue
        if $(gerrit.is_open "$patch_id"); then
            tools.log "${hdr}Related patch $patch_id is still open"
            all_merged="false"
            open_patches+=("$patch_id")
        fi
    done
    if [[ "$all_merged" != "true" ]]; then
        tools.log "${hdr}SKIP because not all related patches are" \
             "closed."
        message+="${message:+\n}$msg_hdr::IGNORE, not all related patches are "
        message+="closed, check ${open_patches}"
        continue
    fi
    ## Check the target_release
    tools.log "${hdr}Checking target release"
    res="$(bz.check_target_release \
        "$bug_id" \
        "$branch" \
        "${CHECK_TARGET_RELEASE[@]}")"
    if [[ $? -ne 0 ]]; then
        tools.log "${hdr}Target release check failed, skipping bug"
        message+="${message:+\n}* Check TR::#$bug_id::ERROR, $res"
        continue
    else
        message+="${message:+\n}* Check TR::#$bug_id::OK"
    fi
    ## Modify the bug status
    if res=$(bz.update_status "$bug_id" "MODIFIED" "$commit"); then
        tools.log "::bug $bug_id::Status updated on bug #$bug_id for gerrit "
            "id #${change_url//*\/} to MODIFIED${res:+\n    $res}"
        message+="${message:+\n}$msg_hdr::OK${res:+, $res}"
    else
        tools.log "::bug $bug_id::Failed to update the status of bug #$bug_id "
            "for gerrit id #${current_patch_id} to MODIFIED\n  $res"
        message+="${message:+\n}$msg_hdr::FAILED, $res"
    fi
    conf.t_put message "$message"
done
if [[ ${#bug_ids[@]} -eq 0 ]]; then
    tools.review "" "" "* Set MODIFIED::IGNORE, no Bug-Url found."
else
    tools.review "" "" "$message"
fi
bz.clean
gerrit.clean
exit 0
