#!/usr/bin/env python

import logging
import sys
import os
from config import load_config
from gerrit import Gerrit
from tools import (
    get_parser_pc,
    get_newer_branches,
)


def get_unmerged_newer_branches(gerrit, change_id, cur_branch, project):
    branches = []
    newer_branches = get_newer_branches(cur_branch, os.environ['GIT_DIR'])
    branches_with_patch = []
    branches_no_patch = []
    patches = gerrit.query(change_id + ' project:' + project,
                           out_format='json')
    for patch in patches:
        if 'branch' not in patch:
            continue
        logging.debug("Checking patch %s" % str(patch))
        if patch['open'] and patch['branch'] in newer_branches:
            logging.error('patch with id {id} still open for branch '
                            '{branch}'.format(**patch))
            branches.append(patch['branch'])
        if patch['branch'] not in branches_with_patch:
            branches_with_patch.append(patch['branch'])
    branches_no_patch = set(newer_branches) - set(branches_with_patch)
    if branches_no_patch:
        logging.error("Patch not in newer branches %s"
                      % ', '.join(branches_no_patch))
    return (branches, branches_no_patch)


def give_warning(gerrit, commit, project, open_branches, no_patch_branches):
    msg = []
    long_msg = []
    if open_branches:
        long_msg.append(
            "WARNING: This patch was not merged yet on all the newer branches"
            "\n  Open on: %s" % ', '.join(open_branches))
        msg.append("* Check merged to previous::WARN, Still open on branches %s"
                   % ', '.join(open_branches))
    if no_patch_branches:
        long_msg.append(
            "WARNING: This patch does not exist yet on all the newer branches"
            "\n  Missing on : %s" % ', '.join(no_patch_branches))
        msg.append("* Check mrged to previous::WARN, Still missing on branches %s"
                   % ', '.join(no_patch_branches))
    print '-1\n0\n' + '\n'.join(msg)
    logging.error('\n'.join(long_msg))


def main():
    parser = get_parser_pc()
    args, unknown = parser.parse_known_args()
    if args.verbose:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.INFO
    logging.basicConfig(level=loglevel,
                        format='%(asctime)s::'
                        + str(os.getpid())
                        + '::%(levelname)s::%(message)s')
    config = load_config()
    logging.debug("STARTING::PARAMS %s" % sys.argv)
    stable_branches = config.get('STABLE_BRANCHES', None)
    if stable_branches is None:
        logging.info('No stable branches configured, set STABLE_BRANCHES in '
                     'tstream=sys.stderr,he config to the correct value')
        print "* Check merged to previous::IGNORE, No stable branches configured."
        return
    stable_branches = stable_branches.split(' ')
    if args.branch not in stable_branches:
        logging.info('Not in one of the stable branches %s, but in %s'
                     % (stable_branches, args.branch))
        print "* Check merged to previous::IGNORE, Not in stable branch (%s)" \
            % stable_branches
        return
    gerrit = Gerrit(config['GERRIT_SRV'])
    unmerged_branches, no_patch_branches = get_unmerged_newer_branches(
        gerrit,
        args.change,
        args.branch,
        args.project)
    if unmerged_branches or no_patch_branches:
        give_warning(gerrit, args.commit, args.project, unmerged_branches,
                     no_patch_branches)
    else:
        print "* Check merged to previous::OK, change not open on any previous branch"
    logging.info("FINISHED")


if __name__ == '__main__':
    main()
