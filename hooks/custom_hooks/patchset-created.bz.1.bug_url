#!/bin/bash
###############################################################################
# Checks that the patch has Bug-Url in the git commit message, breaks the
# chain if not
#
# Config Options:
#   BRANCHES - List of relevant branches, only those branches listed here will
#              be tested as a bash array: BRANCHES=('rhev-3.2' 'rhev-3.1')
#   BZ_USER - Bz username to use when logging in
#   BZ_PASS - Bz password to use when logging in
#   PRODUCTS - Array with the products allowed
#   STABLE_BRANCHES - String with the space separated list of stable branches
#       to do the extra checks
#   CHECK_TARGET_RELEASE - Pairs of 'branch|regexp' to match agains the bug
#       target release, if regexp starts with '!' it will be negated
#   CONTACT - email/s for the contact, if not specified, will use
#       dcaroest@redhat.com
###############################################################################

source bz.sh
source tools.sh
source gerrit.sh
source conf.sh

###############################################################################
## MAIN
## Parse the parameters
gerrit.parse_params "$@"

## Parse the configuration
conf.load

message=""
result="0"
## Check if we have to manage that branch
if [[ -n $BRANCHES ]] && ! vindex=$(tools.is_in "$branch" "${BRANCHES[@]}"); then
    tools.review "" "" "* Bug-Url: IGNORE, not in a monitored branch (${BRANCHES[@]})"
    bz.clean
    exit 2
fi
### Try to login, fail if there are errors
bz.login "$BZ_USER" "$BZ_PASS" \
|| {
    message+="${message:+\n}* Bug-Url: ERROR, There was an error logging into bugzilla, "
    message+="please contact the administrator ${CONTACT:-dcaroest@redhat.com}"
    tools.review "" "" "$message"
    bz.clean
    exit 2
}
## Check if there are any Bug-Urls
bug_ids=($(bz.get_bug_id $commit))
if [[ -z "$bug_ids" ]]; then
    ## If we are in the stable branch, fail if there are no bug-urls
    if tools.is_in "$branch" ${STABLE_BRANCHES[@]} >/dev/null; then
        message+="\n* Bug-Url: ERROR, At least one bug-url is required for"
        message+=" the stable branch, make sure header matches 'Bug-Url: ' "
        message+="including cases and spaces."
        tools.review "-1" "" "$message"
        bz.clean
        exit 2
    else
        ## if we are not, just warn
        message+="* Bug-Url: WARN, no bug url found, make sure header "
        message+="matches 'Bug-Url: ' and is a valid url."
        tools.review "" "" "$message"
        bz.clean
        exit 2
    fi
fi
### Start checking bugs
failed=false
got_1_public_bug=false
tools.log "Got bug ids ${bug_ids[@]}"
for bug_id in ${bug_ids[@]}; do
    ## If it's private, fail
    if [[ -z "$SKIP_PRIVATE" ]] && bz.is_private "$bug_id"; then
        tools.log "$bug_id::ERROR bug is private."
        message+="${message:+\n}* #$bug_id::Bug-Url: ERROR, private bug"
        failed=true
        continue
    else
        message+="${message:+\n}* #$bug_id::Bug-Url: OK, public bug"
    fi
    prod="$(bz.get_product "$bug_id")"
    ## If it has the wrong product, ignore that bug
    if ! tools.is_in "$prod" "${PRODUCTS[@]}" >/dev/null; then
        tools.log "$bug_id::ERROR Wrong product $prod"
        message+="${message:+\n}* #$bug_id::Bug-Url: SKIPPED, not (${PRODUCTS[@]}) "
        message+="product but $prod"
        continue
    else
        got_1_public_bug=true
        message+="${message:+\n}* #$bug_id::Bug-Url: Correct product $prod"
    fi
    ## If we are in the stable branch and the target release is not correct,
    ## fail
    if tools.is_in "$branch" ${STABLE_BRANCHES[@]} >/dev/null; then
        res="$(bz.check_target_release \
            "$bug_id" \
            "$branch" \
            "${CHECK_TARGET_RELEASE[@]}")"
        if [[ $? -ne 0 ]]; then
            message+="${message:+\n}* #$bug_id::Bug-Url: ERROR wrong target "
            message+="release for stable branch, $res"
            failed=true
            continue
        else
            message+="${message:+\n}* #$bug_id::Bug-Url: OK, correct target "
            message+="release $res"
        fi
    else
        tools.log "$bug_id::INFO: Current branch $branch not in any of the " \
                  "stable branches: ${STABLE_BRANCHES[@]}"
    fi
done
if ! $got_1_public_bug; then
    ## if we are not, just warn
    message+="${message:+\n}"
    message+="* Bug-Url: WARN, no oVirt bug url found, make sure header "
    message+="matches 'Bug-Url: ' and is a valid url (public and oVirt "
    message+="product)."
    tools.review "" "" "$message"
    bz.clean
    exit 2
fi

if $failed; then
    bz.clean
    tools.log "$message"
    tools.review "-1" "" "$message"
    exit 2
fi
bz.clean
tools.review "" "" "$message"
