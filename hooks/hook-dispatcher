#!/usr/bin/env python
"""
This dispatcher handles the hook execution

Allowed tags:

Ignore-Hooks
-----------
    Ignore-Hooks: hook1, hook2, ...
    Do not run the given hooks

Run-Only-Hooks
-----------
    Run-Only-Hooks: hook1, hook2 ...
    Run only the given hooks if they exist

"""

import os
import sys
import re
import subprocess
import argparse
import logging
from dulwich.repo import Repo
## Load also the hook libs
os.environ["PATH"] = os.environ["PATH"] + ':' \
    + os.path.dirname(os.path.realpath(__file__)) + '/lib'
os.environ["PYTHONPATH"] = os.environ.get("PYTHONPATH", "") \
    + ':' + os.path.dirname(os.path.realpath(__file__)) + '/lib'
from lib import (
    gerrit,
    config,
)


def csv_to_set(csv_string):
    return set([elem.strip() for elem in csv_string.split(',')])


def ignore(ignored_hooks, current_hooks, args):
    """
    Return the hooks list without the given hooks

    :param ignored_hooks; csv lis tof the hooks to ignore
    :param current_hooks: array with the currently available hooks
    """
    ignored_hooks = csv_to_set(ignored_hooks)
    logging.info("    Ignoring the hooks %s", ignored_hooks)
    for hook in ignored_hooks:
        match = filter(lambda h: re.match(hook, h), current_hooks)
        if match:
            for mhook in match:
                current_hooks.pop(current_hooks.index(mhook))
    return current_hooks


def run_only(to_run_hooks, current_hooks, args):
    """
    Handles the Run-Only tag, removes all the hooks not matching the given
    hooks

    :param to_run_hooks: array with the csv string passed to the tag
    :param current_hooks: array with the current available hooks
    """
    to_run_hooks = csv_to_set(to_run_hooks)
    logging.info("    Running only the hooks %s", to_run_hooks)
    to_run = []
    for hook in to_run_hooks:
        if hook in current_hooks:
            to_run.append(hook)
    return to_run


def rerun(to_rerun_hooks, current_hooks, args):
    """
    Handles the Rerun-Hooks tag, reruns the given hooks, if all is given it
     will rerun all the hooks

    :param to_run_hooks: array with the csv string passed to the tag
    :param current_hooks: array with the current available hooks
    """
    ## When rerunning use only the patchset-created hooks
    current_hooks = get_hooks(os.path.join(os.environ['GIT_DIR'], 'hooks'),
                              'patchset-created')
    to_rerun_hooks = csv_to_set(to_rerun_hooks)
    logging.info("    Rerunning the hooks %s", to_rerun_hooks)
    to_rerun = []
    args.rerun = True
    for hook in to_rerun_hooks:
        if not hook.startswith('patchset-created') and hook != 'all':
            hook = 'patchset-created.' + hook
        if hook in current_hooks:
            to_rerun.append(hook)
        elif hook == 'all':
            return current_hooks
    return to_rerun


#Tags to look for specified like this:
#
# {
#     tag_name: (
#         Regexp_to_match,
#         function_to_run
#     )
# }
## Commit message tags
COMMIT_TAGS = {
    'ignore': (
        'Ignore-Hooks: ',
        ignore
    ),
    'run_only': (
        'Run-Only-Hooks: ',
        run_only
    ),
}
## Gerrit comment tags
COMMENT_TAGS = {
    'rerun': (
        'Rerun-Hooks: ',
        rerun
    ),
}


def get_tags(tags_def, text):
    """
    Retrieves all the tags defined in the tag_def from text

    :param tag_def: Definition of the tags as specified above
    :param text: text to look for tags (commit message, gerrit message...)
    """
    result = {}
    for line in text.splitlines():
        for tname, toptions in tags_def.iteritems():
            if line.startswith(toptions[0]):
                result[tname] = (line[len(toptions[0]):], toptions[1])
    return result


def get_commit_tags(commit):
    """
    Get the tags that were specified in the comit message

    :param commit: Commit to get the message from
    """
    repo = Repo(os.environ['GIT_DIR'])
    message = repo[commit].message
    logging.debug("Got commit message:\n" + message)
    return get_tags(COMMIT_TAGS, message)


def get_comment_tags(comment):
    """
    Get the tags that were specified in gerrit message

    :param comment: Gerrit comment
    """
    comment = str(comment)
    logging.debug("Got gerrit comment:\n" + comment)
    return get_tags(COMMENT_TAGS, comment)


def get_parser():
    """
    Build the parser for any hook type
    """
    parser = argparse.ArgumentParser(
        description=('This dispatcher handles the'
                     ' special tags and hook'
                     ' execution'),
    )
    for arg in ('change', 'project', 'branch'):
        parser.add_argument('--' + arg,
                            action='store',
                            required=True)
    for arg in ('commit', 'patchset', 'author', 'comment', 'submitter',
                'abandoner', 'reason', 'rerun'):
        parser.add_argument('--' + arg,
                            action='store',
                            default=False,
                            required=False)
    return parser


def flatten(array, elems):
    """
    Function that appends to the array the options given by elems, to build a
    new command line array.

    :param array: Command line array as ['ls', '-l', '/tmp']
    :param elems: Command line options as parsed by arpargse, like
                  [('author', 'dcaro'), ('email', 'dcaroest@redhat.com')]
    """
    option, value = elems
    if value:
        array.extend(('--' + option, value))
    return array


def get_hooks(path, hook_type):
    """"
    Get all the hooks that match the given type in the given path

    :param path: Path to look the hooks in
    :param hook_type: Hook type to look for
    """
    logging.debug("get_hooks::%s on %s" % (hook_type, path))
    hooks = []
    for hook in os.listdir(path):
        if os.access(os.path.join(path, hook), os.X_OK) \
                and hook.startswith(hook_type):
            logging.debug("get_hooks::got hook " + hook)
            hooks.append(hook)
    return hooks


def get_chains(hooks):
    chains = {}
    hooks.sort()
    for hook in hooks:
        if '.' not in hook:
            chain = hook
        elif hook.count('.') < 2:
            chain = hook.split('.')[1]
        else:
            chain = hook.split('.', 2)[1]
        if chain in chains:
            chains[chain].append(hook)
        else:
            chains[chain] = [hook]
    return chains


def parse_stdout(stdout):
    """
    The expected output format is:

    ############
    code_review_value
    verified_value
    multiline_msg
    ############

    Where code_review_value and verified_value can be an empty line if it's
    an abstention (no modifying the value any of the previous or next hooks
    in the chain set)
    If any of the lines is missing then it will assumed an abstention.

        2 lines -> No message
        1 line  -> No message and no verified value
        0 lines -> Not changing anything

    And if any of the two first lines fails when converting to integer, it
    will assume that's the start of the message and count the non-specified
    votes as abstentions


    Examples:
    ################
    message starts here
    -1
    message continues
    ################

    ^^^ this will be parsed as only message and two abstentions

    ################
    -1
    message starts here
    0
    message continues here
    ################

    ^^^ this will count as CR:-1, and the rest message

    ################
    0
    message
    ################

    ^^^ This will count as CR:0 (will level any positive review) and the rest
    message
    """
    result = {
        'code_review': None,
        'verified': None,
        'msg': None,
    }
    stdout = stdout.splitlines()
    for elem_name in ('code_review', 'verified'):
        if not stdout:
            return result
        try:
            elem = stdout.pop(0)
            ## non-voting
            if not elem:
                elem = None
            ## voting
            else:
                elem = int(elem)
                result[elem_name] = elem
        ## So we don't have a number, the message should start here
        except ValueError:
            ## put the line back
            stdout.insert(0, elem)
            break
    result['msg'] = '\n'.join(stdout) or None
    return result


def run_hooks(path, hooks, chain='NONE'):
    """"
    Run the given hooks form the given path

    :param path: Path where the hooks are located
    :param hooks: hook names to run
    """
    hooks.sort()
    params = sys.argv[1:]
    global_result = None
    for hook in hooks:
        cmd = [os.path.join(path, hook)]
        cmd.extend(params)
        logstr = chain + "::" + hook + "::"
        logging.info(logstr + "RUNNING::" + ' '.join(cmd))
        pipe = subprocess.Popen(cmd,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        output, error = pipe.communicate()
        logging.debug("Raw output:\n################\n%s\n###################\n" % output)
        result = parse_stdout(output)
        if global_result is None:
            global_result = result
        else:
            for elem in ('code_review', 'verified'):
                if result[elem] is not None \
                        and result[elem] < global_result[elem]:
                    global_result[elem] = result[elem]
            if result['msg']:
                global_result['msg'] = str(global_result['msg']) \
                    + '\n' + result['msg']
        if pipe.returncode == 0:
            logging.info(logstr + '\n' + str(result))
            error and logging.warn(logstr + '\n' + error)
        else:
            logging.warn(logstr + '\n' + str(result))
            error and logging.error(logstr + '\n' + error)
            logging.warn(chain + "::BROKEN WITH " + str(pipe.returncode))
            return global_result
    return global_result


def run_chains(path, hooks):
    """"
    Run the given hooks form the given path

    :param path: Path where the hooks are located
    :param hooks: hook names to run
    """
    ## add the hooks lib dir to the path
    results = {}
    logging.info("::RUNNING HOOKS::%s", hooks)
    chains = get_chains(hooks)
    for c_name, c_hooks in chains.iteritems():
        logging.info(c_name + "::STARTING")
        results[c_name] = run_hooks(path, c_hooks, c_name)
        if results[c_name]['msg'] is None:
            results[c_name]['msg'] = '* %s: OK' % c_name
        logging.info(c_name + "::FINISHED with result:\n"
                     + str(results[c_name]))
    return results


def get_hook_type(opts):
    """
    Guess the right hook type, gerrit sometimes resolves the real path

    :param opts: options given to the script, so it can guess the hook type
    """
    if opts.patchset:
        return 'patchset-created'
    elif opts.author:
        return 'comment-added'
    elif opts.submitter:
        return 'change-merged'
    elif opts.abandoner:
        return 'change-abandoned'
    else:
        return os.path.basename(__file__)


def send_summary(change_id, project, results):
    """
    Parse all the results and generate the summary review

    :param change_id: string to identify the change with, usually the commit
                      hash or the change-id,patchset pair
    :param results: Dictionary with the compiled results for all the chains

    It will use the lowest values for the votes, skipping the ones that are
    `None`, and merge all the messages into one.

    For example, if it has two chains, one with CR:0 and one with CR:1, the
    result will be CR:0.
    """
    msg = []
    code_review = None
    verified = None
    ## Generate final review
    for result in results.itervalues():
        if result['msg']:
            msg.append(result['msg'])
        if result['code_review'] is not None \
                and (code_review is None
                     or result['code_review'] < code_review):
            code_review = result['code_review']
        if result['verified'] is not None \
                and (verified is None
                     or result['verified'] < verified):
            verified = result['verified']
    ### Reset if neutral review
    if verified is None:
        verified = 0
    if code_review is None:
        code_review = 0
    msg = '\n'.join(msg)
    conf = config.load_config()
    g_server = gerrit.Gerrit(conf['GERRIT_SRV'])
    g_server.review(change_id, project, msg, code_review, verified)
    logging.info("  FINAL REVIEW\nCR: %s\nV: %s\nMSG:\n%s"
                 % (str(code_review), str(verified), str(msg)))


def main():
    logpath = os.path.join(os.path.dirname(__file__), '..', 'logs')
    logging.basicConfig(filename=os.path.join(logpath, 'gerrit.hooks.log'),
                        level=logging.DEBUG,
                        format='%(asctime)s::'
                        + str(os.getpid())
                        + '::%(levelname)s::%(message)s')
    parser = get_parser()
    known_args, rest = parser.parse_known_args()
    res = reduce(flatten, vars(known_args).items(), [])
    ## This second time is to force the existence of the required args
    parser.parse_args(res)
    if 'GIT_DIR' not in os.environ:
        logging.error("Set the GIT_DIR to the repository path")
        raise Exception("Set the GIT_DIR to the repository path")
    logging.debug("STARTING::PARAMS %s" % sys.argv)
    hook_type = get_hook_type(known_args)
    logging.info("STARTING::" + hook_type)
    hooks = get_hooks(os.path.join(os.environ['GIT_DIR'], 'hooks'),
                      hook_type)
    logging.info("::AVAILABLE HOOKS::%s", hooks)
    tags = {}
    change_ident = None
    if known_args.commit:
        ## get tags from the commit message
        tags.update(get_commit_tags(known_args.commit))
        change_ident = known_args.commit
    elif known_args.patchset and known_args.change:
        change_ident = "%s,%s" % (known_args.patchset, known_args.change)
    if known_args.comment:
        ## and from the gerrit comment
        tags.update(get_comment_tags(known_args.comment))
    for tag_val, fun in tags.itervalues():
        ## Execute the functions with the tag value, the current available
        ##  hooks, and the args so they can be modified
        hooks = fun(tag_val, hooks, known_args)
    ## if we found any hooks, run them
    if hooks:
        ## keep them sorted (will be sorted again later though)
        hooks.sort()
        results = run_chains(os.path.join(os.environ['GIT_DIR'], 'hooks'),
                             hooks)
        if change_ident:
            send_summary(change_ident, known_args.project, results)
    logging.info("FINISHED")


if __name__ == '__main__':
    main()
